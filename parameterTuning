# -*- coding: utf-8 -*-
"""
Created on Fri May  6 13:57:49 2022

@author: louis
"""
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier


# Set the parameters by cross-validation
param_grid = {'C': [1, 10, 20], 'gamma': [1,0.1,0.01],'kernel': ['linear', 'rbf', 'sigmoid']}
grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)
grid.fit(X_train,y_train)

print(grid.best_estimator_)
  

param_grid = {'criterion': ['gini','entropy'], 'splitter': ['best','random']}
grid = GridSearchCV(DecisionTreeClassifier(),param_grid,verbose=2,cv=5)
grid.fit(X2_train,y2_train)

print(grid.best_estimator_)


# grid search class weights with svm for imbalance classification
from numpy import mean
from sklearn.datasets import make_classification
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.svm import SVC

# define grid
balance = [{0:1,1:3.8}, {0:1,1:3.9}, {0:1,1:4}, {0:1,1:4.1},{0:1,1:4.2}]
param_grid = dict(class_weight=balance)
# define evaluation procedure
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# define grid search
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=cv, scoring='roc_auc')
# execute the grid search
grid_result = grid.fit(X_train, y_train)
# report the best configuration
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))


# define grid
balance = [{0:1,1:2.5}, {0:1,1:2.75}, {0:1,1:3.4}, {0:1,1:3.5},{0:1,1:3.6}]
param_grid = dict(class_weight=balance)
# define evaluation procedure
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# define grid search
grid = GridSearchCV(estimator=clf, param_grid=param_grid, n_jobs=-1, cv=cv, scoring='roc_auc')
# execute the grid search
grid_result = grid.fit(X_train, y_train)
# report the best configuration
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
