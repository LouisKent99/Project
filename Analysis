# -*- coding: utf-8 -*-
"""
Created on Wed May 11 14:35:11 2022

@author: louis
"""
import datetime as dt
import numpy as np
import pandas as pd
from datetime import datetime
import matplotlib
from collections import Counter

trains = pd.read_csv('trains.csv')
trains['ScD'] = pd.to_datetime(trains['ScD'], format='%Y-%m-%d %H:%M:%S')
trains['AcD'] = pd.to_datetime(trains['AcD'], format='%Y-%m-%d %H:%M:%S')
trains['ScA'] = pd.to_datetime(trains['ScA'], format='%Y-%m-%d %H:%M:%S')
trains['AcA'] = pd.to_datetime(trains['AcA'], format='%Y-%m-%d %H:%M:%S')

weather_man = pd.read_csv('weather_man.csv')
weather_man['AcA'] = pd.to_datetime(weather_man['AcA'], format='%Y-%m-%d %H:%M:%S')

weather_lon = pd.read_csv('weather_lon.csv')
weather_lon['AcD'] = pd.to_datetime(weather_lon['AcD'], format='%Y-%m-%d %H:%M:%S')

weather_rug = pd.read_csv('weather_rug.csv')
weather_rug['AcD'] = pd.to_datetime(weather_rug['AcD'], format='%Y-%m-%d %H:%M:%S')
#merges weather data to train data with closest weather datapoint to train time
tol = pd.Timedelta('1 hour, 30 minute')
df = pd.merge_asof(trains.sort_values('AcD'),weather_lon.sort_values('AcD'),on='AcD',direction='nearest',tolerance=tol)
df = pd.merge_asof(df.sort_values('AcA'),weather_man.sort_values('AcA'),on='AcA',direction='nearest',tolerance=tol)
df = pd.merge_asof(df.sort_values('AcD'),weather_rug.sort_values('AcD'),on='AcD',direction='nearest',tolerance=tol)

# column for delay departure
df['Left_Late'] = df['AcD']-df['ScD']
df['Left_Late'] = df.Left_Late.dt.total_seconds()/60

#Peak times conditions
conditions2 = [(df['ScD'].dt.time < dt.time(5)),
              (df['ScD'].dt.time >= dt.time(5)) & (df['ScD'].dt.time < dt.time(10,5)) & (df['ScD'].dt.weekday < 4) ,
              (df['ScD'].dt.time >= dt.time(5)) & (df['ScD'].dt.time < dt.time(10,5)) & (df['ScD'].dt.weekday >3) ,
              (df['ScD'].dt.time >= dt.time(10,5)) & (df['ScD'].dt.time < dt.time(14,5)),
              (df['ScD'].dt.time >= dt.time(14,5)) & (df['ScD'].dt.time < dt.time(20)) & (df['ScD'].dt.weekday < 4),
              (df['ScD'].dt.time >= dt.time(14,5)) & (df['ScD'].dt.time < dt.time(20)) & (df['ScD'].dt.weekday > 3),
              (df['ScD'].dt.time >= dt.time(20))]

values2 = [0,1,0,0,1,0,0]

df['Peak'] = np.select(conditions2,values2)

#converts day of the week into cyclic encoding
df['Weekday'] = df['AcD'].dt.weekday
df['Weekday_Sin'] = np.sin(df['Weekday'] * (2 * np.pi / 7))
df['Weekday_Cos'] = np.cos(df['Weekday'] * (2 * np.pi / 7))
df=df.drop(['Weekday'],axis='columns')

#when merging there is an error for trains which arrive past midnight, this fixes it by adding a day to the datetime
df['Time_Late'] = df['AcA']-df['ScA']
df['Time_Late'] = df.Time_Late.dt.total_seconds()/60
df['AcA'] = df.apply(lambda x: x['AcA'] + dt.timedelta(days=1) if x['Time_Late']<-1000 else x['AcA'],axis=1)
df['Time_Late'] = df['AcA']-df['ScA']
df['Time_Late'] = df.Time_Late.dt.total_seconds()/60
df = df.drop(df[df.ScD>datetime(2022,5,13)].index)


# delay by 10 minute intervals
conditions4 = [(df['Time_Late'] < 0),
              (df['Time_Late'] >= 0) & (df['Time_Late'] < 10),
              (df['Time_Late'] >= 10)& (df['Time_Late']< 20),
              (df['Time_Late'] >= 20) & (df['Time_Late']< 30),
              (df['Time_Late'] >= 30) & (df['Time_Late']< 40),
              (df['Time_Late'] >= 40) & (df['Time_Late']< 50),
              (df['Time_Late'] >= 50) & (df['Time_Late']< 60),
              (df['Time_Late'] >= 60)]
values4 = [-1,0,1,2,3,4,5,6]

df['Delayed'] = np.select(conditions4,values4)
df['Delayed_by_10'] = np.where(df['Time_Late']>10,1,0)

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.utils.class_weight import compute_class_weight
from sklearn.metrics import classification_report, confusion_matrix, plot_confusion_matrix
from sklearn.preprocessing import RobustScaler
# correlation matrix
correlation = df.drop(['ScD','AcD','ScA','AcA'], axis ='columns').corr()

import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import seaborn as sn

figure(figsize=(30, 30), dpi=80)
sn.heatmap(correlation, annot=True)
plt.show()
plt.savefig("corr.png")


#single class
X = df.drop(['ScD','AcD','ScA','AcA','Time_Late','Delayed','Delayed_by_10'],axis='columns')
X.head()
y=df['Delayed_by_10']
transformer = RobustScaler().fit(X)
scaledX = transformer.transform(X)
#Use train_test_split to split the data to be trained and tested
X_train, X_test, y_train, y_test = train_test_split(scaledX,y,test_size=0.2)
model=SVC(C=10, gamma=0.01)
model.fit(X_train,y_train)
    
print(model.score(X_train,y_train))
print(model.score(X_test,y_test))
y_predtrain = model.predict(X_train)
print(confusion_matrix(y_train,y_predtrain))
plot_confusion_matrix(model, X_test, y_test)  
print(classification_report(y_train, y_predtrain))

y_pred = model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, model.predict(X_test)))

clf_report = classification_report(y_test, y_pred)

weights = compute_class_weight(class_weight = 'balanced',classes = np.unique(y),y=y)

## TRAINING
#multiclass
X = df.drop(['ScD','AcD','ScA','AcA','Time_Late','Delayed_by_10','Delayed'],axis='columns')
X.head()
y=df[['Delayed','Time_Late']]
t = df[['ScD','ScA']]
transformer = RobustScaler().fit(X)
scaledX = transformer.transform(X)

X_train, X_test, y_train, y_test, time_train, time_test = train_test_split(scaledX,y,t,test_size=0.2)

model2=SVC(C=10,gamma=0.001,decision_function_shape='ovo')
model2.fit(X_train,y_train.Delayed)


print(model2.score(X_train,y_train.Delayed))
print(model2.score(X_test,y_test.Delayed))

y_predtrain = model2.predict(X_train)
print(confusion_matrix(y_train.Delayed,y_predtrain))
print(classification_report(y_train.Delayed, y_predtrain))

# # regression
transformer = RobustScaler().fit(y_predtrain.reshape(len(y_predtrain),1))
X_trainregr = np.append(X_train,transformer.transform(y_predtrain.reshape(len(y_predtrain),1)),axis=1)

from sklearn.svm import SVR

regr = SVR(C=300,epsilon=3)
regr.fit(X_trainregr, y_train.Time_Late)
print(regr.score(X_trainregr,y_train.Time_Late))

##TESTING
y_pred = model2.predict(X_test)
print(confusion_matrix(y_test.Delayed, y_pred))
print(classification_report(y_test.Delayed, y_pred))
 

transformer = RobustScaler().fit(y_pred.reshape(len(y_pred),1))
X_regrtest = np.append(X_test,transformer.transform(y_pred.reshape(len(y_pred),1)),axis=1)

print(regr.score(X_regrtest,y_test.Time_Late))

#Regression error metrics
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
y_predtrain = regr.predict(X_trainregr)
print('MSEtrain =', mean_squared_error(y_train.Time_Late, y_predtrain))
print('R2train =', r2_score(y_train.Time_Late, y_predtrain))
print('MAEtrain =',mean_absolute_error(y_train.Time_Late, y_predtrain))

print('MSEtest =', mean_squared_error(y_test.Time_Late, regr.predict(X_regrtest)))
print('R2test =',r2_score(y_test.Time_Late, regr.predict(X_regrtest)))
print('MAEtest =', mean_absolute_error(y_test.Time_Late, regr.predict(X_regrtest)))

#form new dataframe to see predictions clearly and for plotting
time_test['actualDelay'] = y_test.Time_Late
time_test['class'] = y_test.Delayed
time_test['classpred'] = y_pred
time_test['predictedTime'] = regr.predict(X_regrtest)
time_test = time_test.sort_values(by='ScD')
import matplotlib.pyplot as plt
plt.rc('font', size=12)
fig, ax = plt.subplots(figsize=(10, 6))

# Specify how our lines should look
ax.scatter(time_test.tail(100).ScD, time_test.tail(100).actualDelay, color='tab:orange', label='Actual Time of Delay')
ax.plot(time_test.tail(100).ScD, time_test.tail(100).predictedTime, color='tab:blue', label='Predicted Time of Delay')

ax.set_title('Comparison of Actual Times of Delay compared to Predicted Times of Delay Using Two-Level Modelling')
handles, labels = ax.get_legend_handles_labels()
ax.legend(labels)
ax.set_xlabel('Date')
ax.set_ylabel('Time of Delay (minutes)')

#Uncomment this to restrict y axis
#plt.ylim([-3, 10])



